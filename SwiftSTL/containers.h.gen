//
//  containers.h.gen
//  SwiftSTL
//
//  The MIT License (MIT)
//
//  Copyright (c) 2016 Greg Omelaenko
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

#ifndef deque_h_gen
#define deque_h_gen

#include <unistd.h>

__BEGIN_DECLS

/*%

with open('containers.py') as f:
    exec(f.read())

for type in types:
    Type = camel(type)
    Prefix = '_STL' + Type
    Ref = Prefix + 'Ref'

%*/

typedef struct _%{type}_base * %Ref;

%Ref %{Prefix}Create(size_t size);

%Ref %{Prefix}CreateCopy(const %Ref ref);

void %{Prefix}Destroy(%Ref ref);

//%     for f in types[type]:
%{f.type} %{Prefix + camel(f.name)}(%{f.vattrs} %Ref ref %{', ' + f.args if len(f.args) else ''});
//%     pass

//% pass

__END_DECLS

#endif /* deque_h_gen */
